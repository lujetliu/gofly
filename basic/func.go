package main

import "fmt"

/*
 * 函数, 方法和接口
 *
 * 函数对应操作序列, 是程序的基本组成元素
 * go 中的函数有具名和匿名之分, 具名函数一般对应于包级的函数, 是匿名函数的
 * 一种特例.
 * 当匿名函数引用了外部作用域中的变量时就成了闭包函数, 闭包函数是函数式
 * 编程语言的核心
 *
 * 方法是绑定到一个具体类型的特殊函数, go 中的方法依托于类型, 必须在编译时
 * 静态绑定, 方法是函数的一种
 *
 * TODO: 加深理解方法集, 鸭子面向对象模型
 * 接口定义了方法的集合(方法集), 这些方法依托于运行时的接口对象, 因此接口对
 * 应的方法方法是运行时动态绑定的, go 语言通过隐式接口机制实现了鸭子面向
 * 对象模型
 *
 */

// 函数
// 函数是第一类对象, 分为具名函数和匿名函数, 可以将函数保存到变量中
func Add(a, b int) int                         { return a + b } // 具名函数
var Add1 = func(a, b int) int { return a + b } // 匿名函数

// 参数和返回值都是以传值的方式和被调用者交换数据, 在语法上, 函数还支持
// 可变数量的参数, 可变数量的参数必须是最后传入的参数, 其实是一个切片类型
// 的参数

func main() {
	// 当可变参数是一个空接口类型时, 调用者是否解包(TODO)可变参数会导致
	// 不同的结果
	var a = []interface{}{123, "abc"}
	Print(a...) // 123 abc
	Print(a)    // [123 abc]
}

func Print(a ...interface{}) {
	fmt.Println(a...)
}
