package main

/*
 * TODO: go 源码中的调用顺序
 * 初始化顺序是面向并发的内存模型的基础规范
 * go 程序的初始化和执行总是从 main.main() 函数开始, 如果 main 包里导入了
 * 其他的包, 则会按照顺序将它们包含到 mian 包里(导入顺序依赖具体实现, 一般
 * 是以文件名或包路径名的字符串顺序导入); 如果包被多此导入, 执行的时候只会
 * 导入一次; 当一个包被导入时, 如果它还导入了其他的包, 则先将其他的包包含
 * 进来, 然后创建和初始化这个包的常量和变量; 再调用包里的 init() 函数, 如果
 * 一个包有多个 init() 函数, 实现可能是以文件名的顺序调用, 那么同一个文件中
 * 的多个 init() 是以出现的顺序依次调用的(init() 不是普通函数, 可以定义多个,
 * 但是不能被其他函数调用);最终,在 mian 包中的所有包常量, 包变量被创建和初始
 * 化, 并且只有在 init() 函数被执行后, 才会进入 main.main() 函数, 程序开始
 * 正常执行.
 *
 *
 * 在 mian.main() 函数执行之前所有都运行在同一个 goroutine 中, 也是运行在程序
 * 主系统线程中, 如果某个 init() 函数内部用 go 关键字启动了新的 goroutine,
 * 那么新的 goroutine 和 main.main() 函数是并发执行的.
 *
 * 因为所有的 init() 和 main.main() 都是在主线程完成, 所以满足顺序一致性模型
 */
