package main

/*
	TODO: go 汇编
	asm 入门教程(https://golang.org/doc/asm)
	无论高级语言如何发展, 作为最接近cpu的汇编语言的低位是无法彻底被替代的,
	只有通过汇编语言才能彻底挖掘cpu芯片的全部功能, 因此操作系统的引导过程
	必须要依赖汇编语言的帮助; 很多底层的加密解密等对性能敏感的算法会考虑
	通过汇编语言进行性能优化; 理解汇编更容易理解 go 语言中动态栈/接口等
	高级特性的实现原理;

	go 汇编语言并不是一种独立的语言, 因为 go 汇编语言无法独立使用; go 汇编代码
	必须以 go 包的方式组织(TODO: go 源码), 同时包中至少要有一个 go 语言文件用于
	指明当前包名等基本信息; 如果 go 汇编代码中定义的变量和函数要被其他 go 语言
	代码引用, 还需要通过 go 语言代码将汇编中定义的符号声明出来;
	用于变量的定义和函数的定义的 go 汇编文件类似于 c 语言中的 .c 文件, 而用于
	导出汇编中定义的符号的 go 文件类似于 c 语言的 .h 文件;

	用 GLOBL 命令将符号导出;
	用 DATA 命令初始化包变量;
	./variable

	不推荐通过汇编定义变量, 因为用 go 语言定义变量更加简单和安全, 在 go 中定义
	变量, 编译器可以计算好变量的大小, 零值初始化, 同时也包含了足够的类型信息;
	汇编语言的优势是挖掘机器的特性和性能, 慎用.

*/
