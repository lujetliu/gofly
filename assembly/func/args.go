package main

/*
	参数和返回值
	对于函数来说, 最重要的是函数对外提供的api约定, 包含函数的名称, 参数和返
	回值, 当这些都确定后就需要精确计算参数和返回值的大小;

	func Swap(a, b int) (ret0, ret1 int)
	对于函数 Swap 的签名, 可以看出其需要4个 int 类型的空间, 参数和返回值的
	大小就是32字节
	TEXT ·Swap(SB), $0-32

	为了在汇编中引用这4个参数, go 汇编中引入了一个伪寄存器FP, 表示函数当前
	帧的地址, 也就是第一个参数的地址, 因此可以通过 +0(FP), +8(FP), +16(FP),
	+24(FP) 分别引用 a, b, ret0, ret1 这4个参数

	但是在汇编代码中, 并不能直接以 +0(FP) 的方式来使用参数, 为了编写易于维护
	的汇编代码, go 汇编要求任何通过伪寄存器FP访问的变量必须和一个临时标识符
	前缀组合后才能有效, 一般使用参数对应的变量名作为前缀;

	高地址	    -----------------
	 /|\  		|               |栈底
	  |   		|    stack      |
	  |   		|               |
	  |   		|               |
	  |   		|               |
	  |   		|               |
	  |   		|              \|/栈顶
	  |   		|---------------|                   call frame
	  |   		|               |  <-------------- |-----------| <-- arg+argsize(FP)
	  |   		|    stack      |                  |   argsize | <-------------------------
	  |   		|               |                  |           |                           |
	  |   		|               |                  |-----------| <-- arg+0(FP)             |
	  |   		|  call frame   |                                                          |
	  |   		|      |        |                                                          |
	  |   		|      |        |                  |-----------|                           |
	  |   		|      |        |                  |           |                           |
	  |   		|      |        |                  |-----------| <-- tmp-0(SP)             |
	  |   		|      |        |                                                          |
	  |   		|      |        |                  |-----------| <-----------              |
	  |   		|      |        |  <---------------| framesize |            |              |
	  |   		|      |        |                  |-----------| <-- 0(SP)  |              |
	  |   		|     \|/       |                                 			|              |
	  |   		|               |  <--- 0(SP)                     			|              |
	  |   		|_______________|                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|    unused     |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|---------------|                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|    heap       |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|             |
	  |   		|---------------|                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|    data       |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|---------------|                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|    rodata     |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|               |                                 			|              |
	  |   		|---------------|                                           |              |
	  |   		|               |         	-----------------------------------------------------
	  |   		|               | <---------|   TEXT   |  ·Swap(SB)  | $framesize  |  - |  32   |
	  |   		|               |         	-----------------------------------------------------
	  |   		|               |                            |
	  |   		|    text       |                            |
	  |   		|               |                            |
	  |   		|               | <--------------------------
	  |  		|---------------|
	低地址  		  内存


	展示使用变量:
	TEXT ·Swap(SB), $0
		MOVQ a+0(FP), AX     // AX = a
		MOVQ b+8(FP), BX     // BX = b
		MOVQ BX, ret0+16(FP) // ret0 = BX
		MOVQ AX, ret1+24(SP) // ret1 = AX
		RET
	可以看出 a, b, ret0, ret1 的内存地址是依次递增的, 伪寄存器FP是第一个变量的开始地址

*/
